// serialize key/value pairs in a simple, single-line format
/**
 * @param {string[]} keyValues
 */
export function keyValueMarshal(...keyValues) {
  if (keyValues.length % 2 !== 0) {
    throw new Error("odd number of key-value pairs");
  }

  let buf = "";
  for (let i = 0; i < keyValues.length; i += 2) {
    const key = keyValues[i];
    if (key.includes(" ") || key.includes("\n")) {
      throw new Error(`key '${key}' contains space or newline`);
    }
    if (i > 0) {
      buf += " ";
    }
    buf += key;
    buf += ":";
    const v = keyValues[i + 1];
    if (v.includes(" ") || v.includes("\n") || v.startsWith('"')) {
      // needs escaping
      buf += '"';
      for (const char of v) {
        if (char === '"' || char === "\\" || char === "\n") {
          buf += "\\";
          switch (char) {
            case '"':
            case "\\":
              buf += char;
              break;
            case "\n":
              buf += "n";
              break;
            default:
              throw new Error("invalid state");
          }
        } else {
          buf += char;
        }
      }
      buf += '"';
    } else {
      buf += v;
    }
  }
  return buf;
}

// parse key/value single-line format generated by keyValueMarshal
/**
 * @param {string} str
 */
export function keyValueUnmarshal(str) {
  const res = [];
  let s = str;

  while (s.length > 0) {
    const keyEnd = s.indexOf(":");
    if (keyEnd === -1) {
      throw new Error(`didn't find ':' in '${str}' indicating end of key`);
    }
    // key
    res.push(s.substring(0, keyEnd));
    s = s.substring(keyEnd + 1);
    if (s.length === 0) {
      // we allow empty values
      res.push("");
      return res;
    }

    if (s[0] === '"') {
      // value is escaped
      s = s.substring(1);

      let buf = "";
      let i = 0;
      while (i < s.length) {
        const c = s[i];
        switch (c) {
          case "\\":
            i++;
            if (i >= s.length) {
              throw new Error(`bad value escaping in '${str}'`);
            }
            switch (s[i]) {
              case '"':
              case "\\":
                buf += s[i];
                break;
              case "n":
                buf += "\n";
                break;
              default:
                throw new Error(
                  `unknown escape sequence '\\${s[i]}' in '${str}'`,
                );
            }
            break;
          case '"':
            // end of escaped value
            res.push(buf);
            s = s.substring(i + 1);
            if (s.length === 0) {
              return res;
            }
            if (s[0] !== " ") {
              throw new Error(
                `unexpected character '${s[0]}' after value in '${str}'`,
              );
            }
            s = s.substring(1);
            i = s.length; // break out of while loop
            break;
          default:
            buf += s[i];
            break;
        }
        i++;
      }
      if (i === s.length && s[s.length - 1] !== '"') {
        throw new Error(`unexpected end of escaped value in '${str}'`);
      }
    } else {
      // unescaped value, ends with space or end of string
      const valEnd = s.indexOf(" ");
      if (valEnd === -1) {
        res.push(s);
        return res;
      }
      res.push(s.substring(0, valEnd));
      s = s.substring(valEnd);
      if (s.length === 0) {
        return res;
      }
      if (s[0] !== " ") {
        throw new Error(
          `expected ' ' but got '${s[0]}' after value in '${str}'`,
        );
      }
      s = s.substring(1);
    }
  }
  return res;
}
